{"message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.3.2/src/graph.rs","byte_start":13567,"byte_end":13574,"line_start":479,"line_end":479,"column_start":17,"column_end":24,"is_primary":true,"text":[{"text":"        assert!(Ix::max().index() == !0 || NodeIndex::end() != node_idx);","highlight_start":17,"highlight_end":24}],"label":"multiple `max` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"candidate #1 is defined in the trait `graph_impl::IndexType`","code":null,"level":"note","spans":[{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.3.2/src/graph.rs","byte_start":904,"byte_end":921,"line_start":39,"line_end":39,"column_start":5,"column_end":22,"is_primary":true,"text":[{"text":"    fn max() -> Self;","highlight_start":5,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"candidate #2 is defined in the trait `std::cmp::Ord`","code":null,"level":"note","spans":[{"file_name":"/rustc/b8cedc00407a4c56a3bda1ed605c6fc166655447/src/libcore/cmp.rs","byte_start":18356,"byte_end":18470,"line_start":586,"line_end":591,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"","highlight_start":5,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"disambiguate the method call for candidate #1","code":null,"level":"help","spans":[{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.3.2/src/graph.rs","byte_start":13567,"byte_end":13574,"line_start":479,"line_end":479,"column_start":17,"column_end":24,"is_primary":true,"text":[{"text":"        assert!(Ix::max().index() == !0 || NodeIndex::end() != node_idx);","highlight_start":17,"highlight_end":24}],"label":null,"suggested_replacement":"graph_impl::IndexType::max","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null},{"message":"disambiguate the method call for candidate #2","code":null,"level":"help","spans":[{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.3.2/src/graph.rs","byte_start":13567,"byte_end":13574,"line_start":479,"line_end":479,"column_start":17,"column_end":24,"is_primary":true,"text":[{"text":"        assert!(Ix::max().index() == !0 || NodeIndex::end() != node_idx);","highlight_start":17,"highlight_end":24}],"label":null,"suggested_replacement":"std::cmp::Ord::max","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m: multiple applicable items in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.3.2/src/graph.rs:479:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m479\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert!(Ix::max().index() == !0 || NodeIndex::end() != node_idx);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `max` found\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #1 is defined in the trait `graph_impl::IndexType`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.3.2/src/graph.rs:39:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn max() -> Self;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in the trait `std::cmp::Ord`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: disambiguate the method call for candidate #1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m479\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert!(graph_impl::IndexType::max().index() == !0 || NodeIndex::end() != node_idx);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: disambiguate the method call for candidate #2\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m479\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert!(std::cmp::Ord::max().index() == !0 || NodeIndex::end() != node_idx);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.3.2/src/graph.rs","byte_start":14896,"byte_end":14903,"line_start":516,"line_end":516,"column_start":17,"column_end":24,"is_primary":true,"text":[{"text":"        assert!(Ix::max().index() == !0 || EdgeIndex::end() != edge_idx);","highlight_start":17,"highlight_end":24}],"label":"multiple `max` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"candidate #1 is defined in the trait `graph_impl::IndexType`","code":null,"level":"note","spans":[{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.3.2/src/graph.rs","byte_start":904,"byte_end":921,"line_start":39,"line_end":39,"column_start":5,"column_end":22,"is_primary":true,"text":[{"text":"    fn max() -> Self;","highlight_start":5,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"candidate #2 is defined in the trait `std::cmp::Ord`","code":null,"level":"note","spans":[{"file_name":"/rustc/b8cedc00407a4c56a3bda1ed605c6fc166655447/src/libcore/cmp.rs","byte_start":18356,"byte_end":18470,"line_start":586,"line_end":591,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"","highlight_start":5,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"disambiguate the method call for candidate #1","code":null,"level":"help","spans":[{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.3.2/src/graph.rs","byte_start":14896,"byte_end":14903,"line_start":516,"line_end":516,"column_start":17,"column_end":24,"is_primary":true,"text":[{"text":"        assert!(Ix::max().index() == !0 || EdgeIndex::end() != edge_idx);","highlight_start":17,"highlight_end":24}],"label":null,"suggested_replacement":"graph_impl::IndexType::max","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null},{"message":"disambiguate the method call for candidate #2","code":null,"level":"help","spans":[{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.3.2/src/graph.rs","byte_start":14896,"byte_end":14903,"line_start":516,"line_end":516,"column_start":17,"column_end":24,"is_primary":true,"text":[{"text":"        assert!(Ix::max().index() == !0 || EdgeIndex::end() != edge_idx);","highlight_start":17,"highlight_end":24}],"label":null,"suggested_replacement":"std::cmp::Ord::max","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m: multiple applicable items in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.3.2/src/graph.rs:516:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m516\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert!(Ix::max().index() == !0 || EdgeIndex::end() != edge_idx);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `max` found\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #1 is defined in the trait `graph_impl::IndexType`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.3.2/src/graph.rs:39:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn max() -> Self;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in the trait `std::cmp::Ord`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: disambiguate the method call for candidate #1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m516\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert!(graph_impl::IndexType::max().index() == !0 || EdgeIndex::end() != edge_idx);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: disambiguate the method call for candidate #2\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m516\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert!(std::cmp::Ord::max().index() == !0 || EdgeIndex::end() != edge_idx);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0034`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0034`.\u001b[0m\n"}
